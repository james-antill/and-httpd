
import sys
import os
import glob
import string

# NOTE: CentOS 3 doesn't have a python that includes yield
def __sc_listdir_fullname(x):
    if x[-1] != '/':
        x += '/'
    ret = []
    for i in os.listdir(x):
        ret.append(x + i)
        # yield x + i
    return ret

def init_builders(bldr):
    global gzip_bld
    global bzip_bld
    global and_highlight_bld
    global and_ssi_bld
    global make_examples_index_bld
    global make_index_bld
    global ln_bld
    global lns_bld

    global sc_blders
    global sc_path

# Generic...

    gzip_bld = bldr(action = '\
gzip-r --zero --type=gzip  --output $TARGET $SOURCE')

    bzip2_bld = bldr(action = '\
gzip-r --zero --type=bzip2 --output $TARGET $SOURCE')

# Vstr/and-httpd-tools specific...

    conf_prefix = '@prefix@'

    if 'Template' in dir(string):
        t = string.Template('@exec_prefix@')
        conf_exec_prefix = t.substitute(prefix=conf_prefix)
        
        t = string.Template('@datadir@')
        conf_datadir = t.substitute(prefix=conf_prefix,
                                    exec_prefix=conf_exec_prefix)
        
        t = string.Template('@libexecdir@')
        conf_libexecdir = t.substitute(exec_prefix=conf_exec_prefix)
        
        t = string.Template('$datadir/$app:$libexecdir/$app')
        and_httpd_tools_path = t.substitute(datadir=conf_datadir,
                                            libexecdir=conf_libexecdir,
                                            app="and-httpd-@VERSION@-tools")
    else:
        and_httpd_tools_path = ''
        and_httpd_tools_path += conf_prefix
        and_httpd_tools_path += '/share/and-httpd-@VERSION@-tools'
        and_httpd_tools_path += ':'
        and_httpd_tools_path += conf_prefix
        and_httpd_tools_path += '/libexec/and-httpd-@VERSION@-tools'

    and_highlight_bld = bldr(action = '\
and-highlight --css-file=http://www.and.org/f_c-1.0.css $HIGHARGS $SOURCE > $TARGET')

    and_ssi_bld       = bldr(action = '\
and-ssi $SSIARGS $SOURCE > $TARGET')

    make_examples_index_bld = bldr(action = '\
make_index --filter-args="-A README -A Makefile -A SConstruct --acpt-name-end .c --acpt-name-end .h --deny-all" --output $TARGET $SOURCE')

    make_pics_index_bld = bldr(action = '\
img_index $SOURCE $TARGET')

    make_index_bld = bldr(action = '\
make_index $MKINDXARGS --output $TARGET $SOURCE')

    cp_bld  = bldr(action = 'cp $SOURCE $TARGET')
    ln_bld  = bldr(action = 'ln $SOURCE $TARGET')
    lns_bld = bldr(action = 'ln -s $SOURCE $TARGET')

    cp_conf_addMD5_bld = bldr(action = 'cp_conf_add_MD5 $TARGET $SOURCES')

    img_resize_10pc = bldr(action = 'img_resize 10 $SOURCE $TARGET')
    img_resize_40pc = bldr(action = 'img_resize 40 $SOURCE $TARGET')
    img_resize_55pc = bldr(action = 'img_resize 55 $SOURCE $TARGET')
    img_resize_75pc = bldr(action = 'img_resize 75 $SOURCE $TARGET')
    
    sc_path = "/usr/local/bin:/usr/bin:/bin:" + and_httpd_tools_path
    sc_blders = {'Highlight'    : and_highlight_bld,
                 'SSI'          : and_ssi_bld,
                 'Make_indx'    : make_index_bld,
                 'GZip'         : gzip_bld,
                 'BZip2'        : bzip2_bld,
                 'Make_ex_indx' : make_examples_index_bld,
                 'Pics_img_10pc': img_resize_10pc,
                 'Pics_img_40pc': img_resize_40pc,
                 'Pics_img_55pc': img_resize_55pc,
                 'Pics_img_75pc': img_resize_75pc,
                 'Pics_indx'    : make_pics_index_bld,
                 'CP_addMD5'    : cp_conf_addMD5_bld,
                 'CP'           : cp_bld,
                 'LNS'          : lns_bld,
                 'LN'           : ln_bld}

def init_env(Env):
    global sc_Zip
    global sc_GZip
    global sc_BZip2
    
    env = Env(ENV = {'PATH' : sc_path}, BUILDERS = sc_blders)
    sc_Zip   = sc_allzip_bld({'ext' : '.gz',  'bld' : env.GZip},
                             {'ext' : '.bz2', 'bld' : env.BZip2})
    sc_GZip  = sc_allzip_bld({'ext' : '.gz',  'bld' : env.GZip})
    sc_BZip2 = sc_allzip_bld({'ext' : '.bz2', 'bld' : env.BZip2})

    return env

def init(bldr, Env):
    init_builders(bldr)
    return init_env(Env)


conf = {'GENERATE_INDEX_NAME' : "index.html",
	'ROOT_DIR'            : "html/",
	'GENERATED_DIR'       : "generated_html/",
	'CONF_DIR'            : "conf/",
	'CONF_TMPL_DIR'       : "conf_tmpl/",
	}

# Way to comment out a list...
def ignore(x):
    pass

# Generate index.html files automatically in a different dir...
def gen_dif_idx(env, data, x, rec=False):
    subdir = x
    def gen__name(x):
        indx = conf['GENERATE_INDEX_NAME']
        f1 = conf['GENERATED_DIR'] + subdir + '/' + x + '/' + indx
        f2 = conf['ROOT_DIR']      + subdir + '/' + x + '/'
        f3 = conf['CONF_DIR']      + subdir + '/' + x + '/' + indx
        data.append([f1, env.Dir(f2), f3])

        if not rec:
            return
		
        for y in __sc_listdir_fullname(f2):
            if os.path.islink(y) or not os.path.isdir(y):
                continue
            gen__name(x + '/' + os.path.basename(y))
    return gen__name

def apply_dif_idx(data, env, Make_indx=None, LN=None,
                  conf_gen_html=None, Zip=None):
    if Make_indx is None:
        Make_indx = env.Make_indx
    if LN is None:
        LN = env.CP_addMD5
    if conf_gen_html is None:
        conf_gen_html = "conf_tmpl/make_index"
    if Zip is None:
        Zip = sc_Zip
    for i in data:
        Make_indx(i[0], i[1])
        deps = [conf_gen_html, i[0], i[0] + '.gz', i[0] + '.bz2']
        cfname_dep = LN(i[2], deps)
        Zip(i[0])


# Generate index.html files automatically in same dir...
def gen_sam_idx(env, data, x, rec=False):
    subdir = x
    def gen__name(x):
        indx = conf['GENERATE_INDEX_NAME']
        f1 = conf['ROOT_DIR'] + subdir + '/' + x + '/' + indx
        f2 = conf['ROOT_DIR'] + subdir + '/' + x + '/'
        f3 = conf['CONF_DIR'] + subdir + '/' + x + '/' + indx
        # all this is needed due to bug#1185284
        files = []
        for name in __sc_listdir_fullname(f2):
            if os.path.basename(name) == indx:
                continue
            if os.path.basename(name) == indx + ".gz":
                continue
            if os.path.basename(name) == indx + ".bz2":
                continue
			
            if os.path.islink(name) and not os.path.isfile(name):
                continue # recursion bug#1185293
            if os.path.getsize(name) > (1000 * 1000 * 1000):
                continue # string error bug#1185299

            if os.path.isdir(name):
                files.append(env.Dir(name))
            else:
                files.append(name)
        if len(files):
            data.append([f1, env.Dir(f2), f3, files])
        
        if not rec:
            return
		
        for y in __sc_listdir_fullname(f2):
            if os.path.islink(y) or not os.path.isdir(y):
                continue
            gen__name(x + '/' + os.path.basename(y))
		
    return gen__name

def apply_sam_idx(data, env, Make_indx=None, LN=None,
                  conf_gen_html=None, Zip=None):
    if Make_indx is None:
        Make_indx = env.Make_indx
    if LN is None:
        LN = env.CP_addMD5
    if conf_gen_html is None:
        conf_gen_html = "conf_tmpl/EMPTY"
    if Zip is None:
        Zip = sc_Zip
    for i in data:
        abcd = Make_indx(i[0], i[1])
        for j in i[3]:
            env.Depends(abcd, j)
        env.Ignore(abcd, i[1])

        deps = [conf_gen_html, i[0], i[0] + '.gz', i[0] + '.bz2']
        LN(i[2], deps)
        
        Zip(i[0])


# Special code for the examples dir. indexing
def apply_sam_examples_code(data, env, Highlight=None, LN=None, 
                            ex_neg=None, ex_txt=None, Zip=None):
    if Highlight is None:
        Highlight = env.Highlight
    if LN is None:
        LN = env.CP_addMD5
    if ex_neg is None:
        ex_neg="conf_tmpl/negotiate-and-highlight-plain_html"
    if ex_txt is None:
        ex_txt="conf_tmpl/UNCOOL_URI-txt"
    if Zip is None:
        Zip = sc_Zip
        
    for pat in data:
        for i in glob.glob(conf['ROOT_DIR'] + pat[0] + pat[1]):
            Highlight(i + ".html", i)

            name = os.path.basename(i)
            conf_name = conf['CONF_DIR'] + pat[0] + name
            
            deps = [ex_neg, i + ".html", i + ".html.gz", i + ".html.bz2"]
            cfname_dep = LN(conf_name, deps)
            
            deps = [ex_txt, i, i + ".gz", i + ".bz2"]
            cfname_dep = LN(conf_name + ".txt", deps)
            
            Zip(i + ".html")
            Zip(i)

def apply_sam_examples_idx(data, env, Make_ex_indx=None, Zip=None,
                           LN=None, ex_conf=None):
    if Make_ex_indx is None:
        Make_ex_indx = env.Make_ex_indx
    if Zip is None:
        Zip = sc_Zip
    if LN is None:
        LN = env.CP_addMD5
    if ex_conf is None:
        ex_conf = "conf_tmpl/EMPTY"
        
    for src in data:
        name = conf['ROOT_DIR'] + src[0]
        fname = name + "/" + conf['GENERATE_INDEX_NAME']
        abcd = Make_ex_indx(fname, env.Dir(name))
        for j in glob.glob(name + "/" + src[1]):
            env.Depends(abcd, j)
        env.Ignore(abcd, env.Dir(name))

        conf_name = conf['CONF_DIR'] + src[0]
        conf_name = conf_name + "/" + conf['GENERATE_INDEX_NAME']
        deps = [ex_conf, fname, fname + ".gz", fname + ".bz2"]
        LN(conf_name, deps)
        
        Zip(name + "/" + conf['GENERATE_INDEX_NAME'])

# Special code for the pictures dir. indexing
def pics_idx(env, x, rec=False, Pics_indx=None, Pics_img_10pc=None,
             Pics_img_40pc=None, Pics_img_55pc=None, Pics_img_75pc=None,
             Zip=None, LN=None, conf_pics_indx=None, conf_gen_pic=None):
    subdir = x
    if Pics_indx is None:
        Pics_indx = env.Pics_indx
    if Pics_img_10pc is None:
        Pics_img_10pc = env.Pics_img_10pc
    if Pics_img_40pc is None:
        Pics_img_40pc = env.Pics_img_40pc
    if Pics_img_55pc is None:
        Pics_img_55pc = env.Pics_img_55pc
    if Pics_img_75pc is None:
        Pics_img_75pc = env.Pics_img_75pc
    if Zip is None:
        Zip = sc_Zip
    if LN is None:
        LN = env.CP_addMD5
    if conf_pics_indx is None:
        conf_pics_indx = "conf_tmpl/make_pics_index"
    if conf_gen_pic is None:
        conf_gen_pic = "conf_tmpl/GENERATED_HTML"
    def gen__name(x):
        indx   = conf['GENERATE_INDEX_NAME']
        gfname = conf['GENERATED_DIR'] + subdir + '/' + x + '/' + indx
        gdir   = conf['GENERATED_DIR'] + subdir + '/' + x + '/'
        rdir   = conf['ROOT_DIR']      + subdir + '/' + x + '/'
        cfname = conf['CONF_DIR']      + subdir + '/' + x + '/' + indx
        cdir   = conf['CONF_DIR']      + subdir + '/' + x + '/'

        gfname_dep = Pics_indx(gfname, env.Dir(rdir))
        Zip(gfname)
        
        deps = [conf_pics_indx, gfname, gfname + ".gz", gfname + ".bz2"]
        LN(cfname, deps)

        skip_dir_names = ['.', '..', 'img_10', 'img_40', 'img_55', 'img_75']
        for i in __sc_listdir_fullname(rdir):
            name, ext = os.path.splitext(i)
            if ext not in ['.jpg', '.png', '.gif']: # Shouldn't HC
                bname = os.path.basename(i)
                if os.path.isdir(i) and bname not in skip_dir_names:
                    glowerdir = gdir + bname + "/" + indx
                    env.Depends(gfname_dep, glowerdir)
                continue
            if os.path.isdir(i):
                continue

            bname = os.path.basename(i)
            
            env.Depends(gfname_dep, i)
            deps = [conf_gen_pic, i, i + ".gz", i + ".bz2"]
            for d in ["img_10/", "img_40/", "img_55/", "img_75/"]:
                env.Depends(gfname_dep, gdir + d + bname)
                LN(cdir + d + bname, deps)

            Pics_img_10pc(gdir + "img_10/" + bname, i)
            Pics_img_40pc(gdir + "img_40/" + bname, i)
            Pics_img_55pc(gdir + "img_55/" + bname, i)
            Pics_img_75pc(gdir + "img_75/" + bname, i)
            
        env.Ignore(gfname_dep, env.Dir(rdir))
        
        if not rec:
            return
		
        for bname in os.listdir(rdir):
            if bname in skip_dir_names:
                continue
            if not os.path.isdir(rdir + '/' + bname):
                continue
            gen__name(x + '/' + bname)
    return gen__name

# SSI Processing
def gen_files_sam_ext(env, data, x, rec=False):
    subdir = x
    def gen__name(x, ext_in=".shtml", ext_out=".html"):
        indx = conf['GENERATE_INDEX_NAME']
        f2 = conf['ROOT_DIR'] + subdir + '/' + x + '/'
        f3 = conf['CONF_DIR'] + subdir + '/' + x + '/'
        # all this is needed due to bug#1185284
        files = []
        for name in glob.glob(f2 + '*' + ext_in):
            basename = os.path.basename(name)
            if basename == indx:
                continue
            if basename == indx + ".gz":
                continue
            if basename == indx + ".bz2":
                continue
			
            if os.path.islink(name) and not os.path.isfile(name):
                continue # recursion bug#1185293
            if os.path.getsize(name) > (1000 * 1000 * 1000):
                continue # string error bug#1185299

            out_name  = name[:-len(ext_in)] + ext_out
            conf_out_name = f3 + basename[:-len(ext_in)] + ext_out
            conf_name     = f3 + basename
            files.append([out_name, name, conf_out_name, conf_name])
        if len(files):
            data.append([ext_in, ext_out, files])
        
        if not rec:
            return
		
        for y in __sc_listdir_fullname(f2):
            if os.path.islink(y) or not os.path.isdir(y):
                continue
            gen__name(x + '/' + os.path.basename(y))
		
    return gen__name

def apply_sam_ssi(data, env, SSI=None, Zip=None, LN=None, ex_conf=None):
    if SSI is None:
        SSI = env.SSI
    if Zip is None:
        Zip = sc_Zip
    if LN is None:
        LN = env.CP_addMD5
    if ex_conf is None:
        ex_conf = "conf_tmpl/EMPTY"
    for i in data:
        ext_in  = i[0]
        ext_out = i[1]
        for fname in i[2]:
            SSI(fname[0], fname[1])
            conf_name = fname[3]
            if not os.path.isfile(conf_name):
                conf_name = ex_conf
            deps = [conf_name, fname[0], fname[0] + '.gz', fname[0] + '.bz2']
            LN(fname[2], deps)
            Zip(fname[0])

def __sc_zip_bld(ext, bld):
    def zipper(fname):
        bld(fname + ext, fname)
    return zipper

def sc_allzip_bld(*bldrs):
    all = []
    for i in bldrs:
        all.append(__sc_zip_bld(i['ext'],  i['bld']))
    def zipper(fname):
        for i in all:
            i(fname)
    return zipper
